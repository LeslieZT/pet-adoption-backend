generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  departmentId Int        @id @default(autoincrement()) @map("department_id")
  name         String
  code         String
  createdAt    DateTime?  @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")
  districts    District[]
  provinces    Province[]

  @@map("departments")
}

model Province {
  provinceId   Int        @id @default(autoincrement()) @map("province_id")
  name         String
  code         String
  departmentId Int        @map("department_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")
  districts    District[]
  department   Department @relation(fields: [departmentId], references: [departmentId])

  @@map("provinces")
}

model District {
  districtId   Int        @id @default(autoincrement()) @map("district_id")
  name         String
  code         String
  provinceId   Int        @map("province_id")
  departmentId Int        @map("department_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")
  department   Department @relation(fields: [departmentId], references: [departmentId])
  province     Province   @relation(fields: [provinceId], references: [provinceId])
  shelters     Shelter[]
  users        User[]

  @@map("districts")
}

model User {
  userId       String        @id @default(dbgenerated("gen_random_uuid()")) @map("user_id") @db.Uuid
  channel      String
  firstName    String        @map("first_name")
  lastName     String        @map("last_name")
  email        String
  password     String
  avatar       Json?
  phone        String?
  birthdate    DateTime?     @db.Date
  address      String?
  districtId   Int?          @map("district_id")
  customerId   String?       @map("customer_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  adoptions    Adoption[]
  donations    Donation[]
  favoritePets FavoritePet[]
  shelters     Shelter[]
  district     District?     @relation(fields: [districtId], references: [districtId])

  @@map("users")
}

model Plan {
  planId           Int        @id @default(autoincrement()) @map("plan_id")
  productId        String     @map("product_id")
  codeOneTime      String     @map("code_one_time")
  codeSubscription String     @map("code_subscription")
  name             String
  title            String
  description      String
  price            Decimal    @db.Decimal(6, 2)
  isPolular        Boolean    @map("is_polular")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime?  @updatedAt @map("updated_at")
  donations        Donation[]

  @@map("plans")
}

model Donation {
  donationId String    @id @default(dbgenerated("gen_random_uuid()")) @map("donation_id") @db.Uuid
  planId     Int?      @map("plan_id")
  userId     String?   @map("user_id") @db.Uuid
  email      String?
  name       String?
  amount     Decimal   @db.Decimal(6, 2)
  type       String
  status     String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  plan       Plan?     @relation(fields: [planId], references: [planId])
  user       User?     @relation(fields: [userId], references: [userId])

  @@map("donations")
}

model Shelter {
  shelterId  String    @id @default(dbgenerated("gen_random_uuid()")) @map("shelter_id") @db.Uuid
  name       String
  address    String
  phone      String
  email      String
  latitude   Decimal
  longitude  Decimal
  districtId Int       @map("district_id")
  userId     String?   @map("user_id") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  pets       Pet[]
  district   District  @relation(fields: [districtId], references: [districtId])
  user       User?     @relation(fields: [userId], references: [userId])

  @@map("shelters")
}

model PetCategory {
  petCategoryId Int        @id @default(autoincrement()) @map("pet_category_id")
  name          String
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime?  @updatedAt @map("updated_at")
  breeds        PetBreed[]
  pets          Pet[]

  @@map("pet_categories")
}

model PetBreed {
  petBreedId Int         @id @default(autoincrement()) @map("pet_breed_id")
  name       String
  categoryId Int         @map("category_id")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime?   @updatedAt @map("updated_at")
  category   PetCategory @relation(fields: [categoryId], references: [petCategoryId])
  pets       Pet[]

  @@map("pet_breeds")
}

model Pet {
  petId          Int           @id @default(autoincrement()) @map("pet_id")
  name           String
  description    String
  birthdate      DateTime
  weight         Decimal       @db.Decimal(6, 2)
  height         Decimal       @db.Decimal(6, 2)
  gender         String
  color          String
  behavior       String[]
  profilePicture Json?         @map("profile_picture")
  categoryId     Int           @map("category_id")
  breedId        Int           @map("breed_id")
  shelterId      String        @map("shelter_id") @db.Uuid
  status         String        @default("Available")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime?     @updatedAt @map("updated_at")
  adoptions      Adoption[]
  favoritePets   FavoritePet[]
  photos         PetPhoto[]
  breed          PetBreed      @relation(fields: [breedId], references: [petBreedId])
  category       PetCategory   @relation(fields: [categoryId], references: [petCategoryId])
  shelter        Shelter       @relation(fields: [shelterId], references: [shelterId])

  @@map("pets")
}

model PetPhoto {
  id        Int       @id @default(autoincrement())
  petId     Int       @map("pet_id")
  url       Json?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  pet       Pet       @relation(fields: [petId], references: [petId])

  @@map("pet_photos")
}

model Adoption {
  adoptionId  String    @id @default(dbgenerated("gen_random_uuid()")) @map("adoption_id") @db.Uuid
  application Json
  status      String
  petId       Int       @map("pet_id")
  userId      String    @map("user_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  pet         Pet       @relation(fields: [petId], references: [petId])
  user        User      @relation(fields: [userId], references: [userId])

  @@map("adoptions")
}

model FavoritePet {
  favoritePetId Int       @id @default(autoincrement()) @map("favorite_pet_id")
  petId         Int       @map("pet_id")
  userId        String    @map("user_id") @db.Uuid
  value         Boolean
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  pet           Pet       @relation(fields: [petId], references: [petId])
  user          User      @relation(fields: [userId], references: [userId])

  @@map("favorite_pets")
}
